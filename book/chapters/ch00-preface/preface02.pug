#preface02
    section
        p.paragraph 献给我的父母，是他们永远给我支持和鼓励。
        p.h1 前 言
        p.paragraph 从驱动全球商业、贸易及管理领域不计其数的复杂应用程序的角度来看，说 JavaScript 已经成为当今世界上最流行的编程语言一点儿都不为过。
        p.paragraph JavaScript 是一种非常松散的面向对象语言，也是 Web 开发中极受欢迎的一门语言。JavaScript，尽 管它的语法和编程风格与 Java 都很相似，但它却不是 Java 的“轻量级”版本，甚至与 Java 没有任何关 系。JavaScript 是一种全新的动态语言，它植根于全球数亿网民都在使用的 Web 浏览器之中，致力于增 强网站和 Web 应用程序的交互性。
        p.paragraph 在本书中，我们将对 JavaScript 追根溯源，从它在最早的 Netscape 浏览器中诞生谈起，一直谈到今 天的它对 DOM 和 Ajax 的强大支持。读者将通过本书掌握如何运用和扩展这门语言，从而更好地满足自 己的需求，以及如何实现客户端与服务器的无缝通信，而又不必求助于 Java 或隐藏的网页框架（frame 元素）。一言以蔽之，本书将教会你在面对各种常见的 Web 开发问题时，如何拿出自己的 JavaScript 解决方案。
    section
        p.h3 本书读者对象
        p.paragraph 本书将下列三类人员作为目标读者
        ol
            li     熟悉面向对象编程、经验丰富而又打算学习 JavaScript 的开发人员，JavaScript 毕竟与 Java、C++等传统 OO 语言存在着诸多联系；
            li     有意提升自己网站和 Web 应用程序易用性的 Web 开发人员；
            li     希望全面深入地理解这门语言的初级 JavaScript 开发人员。
        p.paragraph 此外，本书也适合熟悉下列相关技术的读者阅读：
        ol
            li Java
            li PHP
            li ASP.NET
            li HTML
            li CSS
            li XML
        .notes ① 本书中文版《JavaScript 入门经典（第 3 版）》已经由清华大学出版社出版。——译者注（以下脚注如无特殊说明， 均为译者注）
    section
        p.h3 本书内容
        p.paragraph 本书提供了 JavaScript 开发人员必须掌握的内容，全面涵盖了 JavaScript 的各种高级、有用的特性。
        p.paragraph 本书首先介绍了 JavaScript 的起源及其发展现状，随后讨论了构成 JavaScript 实现的各个组成部分， 重点讲解了 ECMAScript 和 DOM 标准。此外，还对不同 Web 浏览器的 JavaScript 实现之间存在的差异， 给出了相应的说明。
        p.paragraph 在此基础上，本书从讲解 JavaScript 的基本概念入手，探讨了 JavaScript 面向对象程序设计和继承的 方式，以及如何在 HTML 等标记语言中使用它。在深入剖析了事件和事件处理之后，又解释了各种浏 览器检测技术。本书还探讨了 HTML5、Selectors API 和 File API 等一系列新 API。
        p.paragraph 本书最后一部分专门讨论了高级主题，涉及性能和内存优化、最佳实践以及对 JavaScript 未来的 展望。
    section
        p.h3 本书结构
        p.paragraph 本书共 25 章，各章简介如下。
        p.paragraph
            span.strong 第1章“JavaScript 简介”：
            | 讲述了 JavaScript 的起源：因何而生，如何发展，现状如何。涉及的  概念主要有 JavaScript 与 ECMAScript 之间的关系、DOM（Document Object Model，文档对象模型）、  BOM（Browser Object Model，浏览器对象模型）。此外，还将讨论 ECMA（European Computer  Manufacturer’s Association，欧洲计算机制造商协会）和 W3C（World Wide Web Consortium，万维网联  盟）制定的一些相关标准。
        p.paragraph
            span.strong 第2章“在 HTML 中使用 JavaScript”：
            | 介绍了如何在 HTML 中使用 JavaScript 创建动态网页。  这一章不仅展示了在网页中嵌入 JavaScript 的各种方式，还讨论了 JavaScript 内容类型（content-type）及  其与&lt;script&gt;元素的关系。
        p.paragraph
            span.strong 第3章“基本概念”， 讨论了 JavaScript 语言的基本概念，包括语法和流控制语句。这一章也分析 了 JavaScript 与其他基于 C 的语言在语法上的相同和不同之处，还介绍了与内置操作符有关的类型转换 问题。
        p.paragraph
            span.strong 第4章“变量、作用域和内存问题”，
            | 探讨了 JavaScript 如何处理其松散类型的变量。这一章还讨 论了原始值和引用值之间的差别，以及与变量有关的执行环境的相应内容。最后，通过介绍 JavaScript 的垃圾收集机制，解释了变量在退出作用域时释放其内存的问题。
        p.paragraph
            span.strong 第5章“引用类型”，
            | 详尽介绍了 JavaScript 内置的所有引用类型，如 Object 和 Array。这一 章对 ECMA-262 规范中描述的每一种引用类型既做了理论上的阐释，又从浏览器实现的角度给出了 介绍。
        p.paragraph
            span.strong 第6章“面向对象的程序设计”，
            | 讲述了在 JavaScript 中如何实现面向对象的程序设计。由于 JavaScript 没有类的概念，因此这一章从对象创建和继承的层面上展示了一些流行的技术。此外，这一 章还讲解了函数原型的概念，并对函数原型与整个面向对象方法的关系进行了探讨。
        p.paragraph
            span.strong 第7章“函数表达式”，
            | 集中介绍了 JavaScript 中最为强大的一个特性——函数表达式。相关的内 容涉及闭包、this 对象的角色、模块模式和创建私有对象成员等。
        p.paragraph
            span.strong 第 8 章“BOM”，
            | 介绍 BOM（Browser Object Model，浏览器对象模型），即负责处理与浏览器自 身有关的交互操作的对象集合。这一章全面介绍了每一个 BOM 对象，包括 window、document、location、 navigator 和 screen。
        p.paragraph
            span.strong 第 9 章“客户端检测”，
            | 讨论了检测客户端机器及其支持特性的各种手段，包括特性检测及用户代 理字符串检测的不同技术。这一章还就每种手段的优缺点及适用情形给出了详细说明。
        p.paragraph
            span.strong 第 10 章“DOM”，
            |介绍 DOM（Document Object Model，文档对象模型），即 DOM1 规定的 JavaScript 中的 DOM 对象。这一章也简要介绍了 XML 及其与 DOM 的关系，为深入探讨所有 DOM 规范及其定义 的操作网页的方式奠定了基础。
        p.paragraph
            span.strong 第 11 章“DOM 扩展”，
            | 介绍了其他 API 以及浏览器本身为 DOM 添加的各种功能。涉及内容包括 Selectors API、Element Traversal API 和 HTML5 扩展。
        p.paragraph
            span.strong 第 12 章“DOM2 和 DOM3”，
            | 在前两章的基础上继续探讨了 DOM2 和 DOM3 中新增的 DOM 属 性、方法和对象。这一章还讨论了 IE 与其他浏览器的兼容性问题。
        p.paragraph
            span.strong 第 13 章“事件”，
            | 解释了 JavaScript 中事件的本质，对遗留机制的支持，以及 DOM 对事件机制的 重新定义。这一章讨论了多种设备，包括 Wii 和 iPhone。
        p.paragraph
            span.strong 第 14 章“表单脚本”，
            | 讲述如何使用 JavaScript 增强表单的交互性，突破浏览器的局限性。这一 章的讨论主要围绕单个表单元素如文本框、选择框，以及围绕数据验证和操作展开。
        p.paragraph
            span.strong 第 15 章“使用 Canvas 绘图”，
            | 讨论了&lt;canvas&gt;标签以及如何通过它来动态绘图。不仅涵盖 2D 上下文，也将讨论 WebGL（3D）上下文，可以为创建动画和游戏夯实基础。
        p.paragraph
            span.strong 第 16 章“HTML5 脚本编程”，
            | 介绍了 HTML5 规定的 JavaScript API，涉及跨文档传递消息、拖 放 API 和以编程方式控制&lt;audio&gt;和&lt;video&gt;元素，以及管理历史状态。
        p.paragraph
            span.strong 第 17 章“错误处理与调试”，
            |讨论浏览器如何处理 JavaScript 代码错误，并展示了一些处理错误的方式。这一章针对每种浏览器分别讨论了相应的调试工具和技术，还给出了简化调试工作的建议。
        p.paragraph
            span.strong 第 18 章“JavaScript 与 XML”，
            | 展示了 JavaScript 中用于读取和操作 XML（eXtensible Markup Language，可扩展标记语言）的特性。这一章分析了不同浏览器提供的 XML 支持和对象的差异，给出 了编写跨浏览器代码的简易方法。此外，这一章还介绍了用于在客户端转换XML数据的XSLT（eXtensible Stylesheet Language Transformations，可扩展样式表语言转换）技术。
        p.paragraph
            span.strong 第 19 章“E4X”，
            | 讨论了 E4X（ECMAScript for XML，ECMAScript 中的 XML 扩展）；设计 E4X 的 出发点是简化 XML 处理任务。这一章探讨了在处理 XML 时，使用 E4X 与使用 DOM 相比有哪些 优势。
        p.paragraph
            span.strong 第 20 章“JSON”，
            | 介绍了作为 XML 替代格式的 JSON，包含浏览器原生支持的 JSON 解析和序 列化，以及使用 JSON 时要注意的安全问题。
        p.paragraph
            span.strong 第 21 章“Ajax 与 Comet”，
            | 讲解了常用的 Ajax 技术，包括使用 XMLHttpRequest 对象及 CORS （Cross-Origin Resource Sharing，跨来源资源共享）API 实现跨域 Ajax 通信。这一章展示了浏览器在实 现与支持方面存在的差异，同时也给出了一些使用建议。
        p.paragraph
            span.strong 第 22 章“高级技巧”，
            | 深入讲解了一些 JavaScript 中较复杂的模式，包括函数柯里化（currying）、 部分函数应用和动态函数。这一章还讨论了如何创建自定义的事件框架和使用 ECMAScript 5 创建防篡 改对象。
        p.paragraph
            span.strong 第 23 章“离线应用与客户端存储”，
            | 讨论了如何检测应用离线以及在客户端机器中存储数据的各 种技术。先从受到最广泛支持的特性 cookie 谈起，继而介绍了新兴的客户端存储技术，如 Web Storage 和 IndexedDB。
        p.paragraph
            span.strong 第 24 章“最佳实践”，
            | 探讨了在企业级环境中使用 JavaScript 的各种方式。其中，着眼于提高可 维护性的内容包括编码技巧、格式化和通用编程实践。这一章还介绍了改善代码执行性能及速度优化的 一些技术。最后讨论了部署问题，包括如何创建构建过程。
        p.paragraph
            span.strong 第 25 章“新兴的 API”，
            | 介绍了为增强浏览器中的 JavaScript 而创建的新 API。虽然这些 API 还没 有得到完整或全面的支持，但它们已经崭露头角，有些浏览器也已经部分地实现了这些 API。这一章的 内容主要是 Web 计时和文件 API。
    section
        p.h3 使用示例
        p.paragraph 要运行本书中的示例，需要安装下列软件：
        p.paragraph  Windows XP、Windows 7 或 Mac OS X；
        p.paragraph  Internet Explorer 6 及更高版本、Firefox 2 及更高版本、Opera 9 及更高的版本、Chrome、Safari 2及更高版本。
        p.notes 完整的示例源代码可以从 http://www.wrox.com/中下载（下载步骤见“源代码”一节）①。
    section
        p.h3 排版约定
        p.paragraph 为了让读者更好地理解本书内容，同时把握住全书的重点，本书将采用以下排版约定。
        .paragraph.important 这种方框样式，表示与上下文相关的重要的、需要牢记的内容。
        .paragraph.tips 这种带方框样式，表示与上下文相关的说明、提示、技巧、窍门和背景知识。
        p.paragraph 正文中的样式说明如下。
            ol
                li 新术语及重要的词汇在首次出现时使用加粗字体以示强调；
                li 表示键盘命令组合的方式是 Ctrl+A；
                li 正文中的代码使用等宽字体，如 persistence.properties；
                li 代码有两种样式：
                    .paragraph
                        div var obj = new Object(); // 大多数示例代码都没有加粗
                        div
                            strong var obj = new Object(); // 加粗的代码表示在上下文中特别重要
    section
        p.h3 源代码
        p.paragraph 在学习本书示例代码时，可以手工敲入所有代码，也可以使用随书的源代码文件。本书所有源代码都可以到 www.wrox.com 中下载。登录该站点后，先找到本书（通过搜索或者图书列表），打开本书页面后，单击其中的 Download Code 链接，就可以下载本书的源代码了①。对于包含在下载文件中的源代码，文中会添加源代码文件名称，点击文件名称即可打开对应的源代码文件。
        p.paragraph 本书代码示例旁边会附有文件名，从中可以找到对应的代码片段。文件名的格式如下：
        p.paragraph.source-file 代码片段所在的文件名
        .paragraph.tips 由于很多书的书名看起来类似，所以更好的方式是通过书的 ISBN 来搜索它。本书原版的 ISBN 是 978-1-118-02669-4。
    section
        p.h3 勘误信息②
        p.paragraph 我们尽最大努力确保正文和代码没有错误。可是，金无足赤，错误在所难免。如果读者发现我们书中的任何错误，例如错别字或代码片段无法运行等，希望您能及时给我们反馈。您提交的勘误不仅能让其他读者受益，而且也能帮助我们进一步提高图书质量。
        p.paragraph 本书原版的勘误页面位于 www.wrox.com 中，登录该站点后可以通过搜索或查询图书列表找到本书页面，然后单击页面中的 Errata（勘误）链接。然后可以看到其他读者已经提交并由 Wrox 的编辑发布的勘误信息。另外，在 www.wrox.com/misc-pages/booklist.shtml 页面中也可以找到本书及勘误页面的链接。
        p.paragraph 如果读者在本书勘误页面中没有发现“你的”错误，麻烦打开 www.wrox.com/contact/techsupport.shtml页面，填写其中的表单并将错误发送给我们。我们会认真核对您提交的错误，如果错误确实存在，我们将把它补充到本书勘误页面中。同时，也将根据您提供的信息对本书后续版本加以改正。

    section
        p.h3 p2p.wrox.com
        p.paragraph 如果您想与本书作者或者其他读者沟通，请加入 P2P 论坛（p2p.wrox.com）。该论坛是基于 Web 的系统，您可以在其中发表与 Wrox 图书及相关技术有关的帖子，并同其他读者或者技术用户交流。论坛提供了一个订阅功能，您可以选择当发表您感兴趣的帖子时通过邮件通知您。Wrox 的作者、编辑、其他行业的专家以及与您正在读同一本书的读者都会出现在这个论坛中。
        p.paragraph
            |在 http://p2p.wrox.com 中，有很多论坛不仅对您理解本书有帮助，而且还会对开发应用程序有帮助。|要加入这个论坛，请按下面几个步骤进行：
            ol
                li 登录到 p2p.wrox.com，单击 Register（注册）链接；
                li 阅读使用条款并单击 Agree（同意）；
                li 完成必填信息和您愿意提供的可选信息，然后单击 Submit（提交）；
                li 随后，您会收到一封电子邮件，其中包含如何验证账号和完成注册过程的信息。
            .tips     如果不加入 P2P 论坛，虽然也可以阅读其中的帖子，但却不能发表帖子，只有注册后才能发表。
        p.paragraph 在加入论坛后，既可以发表新帖子也可以回复其他用户的帖子。可以在任何时间上网浏览论坛中的帖子。如果希望将某个论坛中的新帖子通过电子邮件发送给您，请在论坛列表中单击与论坛名相关的Subscribe to this Forum（订阅这个论坛）图标。
        p.paragraph 如果想了解有关如何使用 Wrox P2P 的更多信息，请阅读包含论坛规则、P2P 及 Wrox 图书常见问题的 P2P FAQ；要阅读 FAQ，可以在任何 P2P 页面中单击 FAQ 链接。
    section
        p.h3 致谢
        p.paragraph 虽然作者的名字被印在了封面上，但一个人是不可能完成这本书的，我想感谢与出版本书有关的一些人。
        p.paragraph 首先，感谢 John Wiley & Sons 继续给我写作的机会。当时，出版本书第 1 版时，他们是唯一愿意承担风险的一家出版社。对此，我将永远铭记于心。
        p.paragraph 感谢 John Wiley & Sons 的编辑人员，特别是 Kevin Kent 和 John Peloquin，他们卓有成效的工作使我保持了坦诚直率的风格，也解决了我在写作期间不断变更内容的问题。
        p.paragraph 还要感谢对本书草稿给出反馈意见的所有人：Rob Friesel、Sergey Ilinsky、Dan Kielp、Peter-Paul Koch、Jeremy McPeak、Alex Petrescu、Dmitry Soshnikov 和 Juriy “Kangax” Zaytsev。你们的宝贵意见让我自己都为本书感到骄傲。
        p.paragraph 我想特别感谢 Brendan Eich，感谢他纠正了第 1 章中有关 JavaScript 历史的细节问题。
        p.paragraph 最后，当然也是非常重要的，感谢 Rey Bango 为本书作序。很高兴在与 Rey 通过网络认识几年之后，终于在 2010 年有缘相见。他是这个行业里真正出色的人，我非常荣幸能请到他为本书作序。
    section
        p.h3 关于技术编辑
        p.paragraph John Peloquin 是一位有十多年 JavaScript 经验的前端工程师，开发过各种规模的应用。John 拥有加州大学伯克利分校的数学学士学位，目前在一家致力于卫生保健的创业公司担任开发主管。在编辑本书之前，John 编辑过 Jeremy McPeak 的 JavaScript 24-Hour Trainer（Wiley，2010）。编写代码和收集勘误之余，John 经常沉迷于数学、哲学和魔术。
