include ../../source/_path
- var ch_num="#ch3-7-1/"
//- 章节
#ch3-7-1
    //-文段
    section
        p.h3 3.7.1 理解参数
        p.paragraph ECMAScript 函数的参数与大多数其他语言中函数的参数有所不同。ECMAScript 函数不介意传递进来多少个参数，也不在乎传进来参数是什么数据类型。也就是说，即便你定义的函数只接收两个参数，在调用这个函数时也未必一定要传递两个参数。可以传递一个、三个甚至不传递参数，而解析器永远不会有什么怨言。之所以会这样，原因是 ECMAScript 中的参数在内部是用一个数组来表示的。函数接收到的始终都是这个数组，而不关心数组中包含哪些参数（如果有参数的话）。如果这个数组中不包含任何元素，无所谓；如果包含多个元素，也没有问题。实际上，在函数体内可以通过 arguments 对象来访问这个参数数组，从而获取传递给函数的每一个参数。
        p.paragraph 其实，arguments 对象只是与数组类似（它并不是 Array 的实例），因为可以使用方括号语法访问它的每一个元素（即第一个元素是 arguments[0]，第二个元素是 argumetns[1]，以此类推），使用 length 属性来确定传递进来多少个参数。在前面的例子中，sayHi()函数的第一个参数的名字叫name，而该参数的值也可以通过访问 arguments[0]来获取。因此，那个函数也可以像下面这样重写，即不显式地使用命名参数：
        pre
            code.
                function sayHi() {
                    alert("Hello " + arguments[0] + "," + arguments[1]);
                }
        p.paragraph.source-file FunctionExample05.htm
        p.paragraph 这个重写后的函数中不包含命名的参数。虽然没有使用 name 和 message 标识符，但函数的功能依旧。这个事实说明了 ECMAScript 函数的一个重要特点：命名的参数只提供便利，但不是必需的。另外，在命名参数方面，其他语言可能需要事先创建一个函数签名，而将来的调用必须与该签名一致。但在 ECMAScript 中，没有这些条条框框，解析器不会验证命名参数。
        p.paragraph 通过访问 arguments 对象的 length 属性可以获知有多少个参数传递给了函数。下面这个函数会在每次被调用时，输出传入其中的参数个数：
        pre
            code.
                function howManyArgs() {
                    alert(arguments.length);
                }
                howManyArgs("string", 45); //2
                howManyArgs(); //0
                howManyArgs(12); //1
        p.paragraph.source-file FunctionExample06.htm
        p.paragraph 执行以上代码会依次出现 3 个警告框，分别显示 2、0 和 1。由此可见，开发人员可以利用这一点让函数能够接收任意个参数并分别实现适当的功能。请看下面的例子：
        pre
            code.
                function doAdd() {
                     if(arguments.length == 1) {
                        alert(arguments[0] + 10);
                     } else if (arguments.length == 2) {
                        alert(arguments[0] + arguments[1]);
                     }
                }
                doAdd(10); //20
                doAdd(30, 20); //50
        p.paragraph.source-file FunctionExample07.htm
        p.paragraph 函数 doAdd()会在只有一个参数的情况下给该参数加上 10；如果是两个参数，则将那个参数简单相加并返回结果。因此，doAdd(10)会返回 20，而 doAdd(30,20)则返回 50。虽然这个特性算不上完美的重载，但也足够弥补 ECMAScript 的这一缺憾了。
        p.paragraph 另一个与参数相关的重要方面，就是 arguments 对象可以与命名参数一起使用，如下面的例子所示：
        pre
            code.
                function doAdd(num1, num2) {
                     if(arguments.length == 1) {
                        alert(num1 + 10);
                     } else if (arguments.length == 2) {
                        alert(arguments[0] + num2);
                     }
                }
        p.paragraph.source-file FunctionExample08.htm
        p.paragraph 在重写后的这个 doAdd()函数中，两个命名参数都与 arguments 对象一起使用。由于 num1 的值与 arguments[0]的值相同，因此它们可以互换使用（当然，num2 和 arguments[1]也是如此）。
        p.paragraph 关于 arguments 的行为，还有一点比较有意思。那就是它的值永远与对应命名参数的值保持同步。例如：
        pre
            code.
                function doAdd(num1, num2) {
                    arguments[1] = 10;
                    alert(arguments[0] + num2);
                }
        p.paragraph.source-file FunctionExample09.htm
        p.paragraph 每次执行这个 doAdd()函数都会重写第二个参数，将第二个参数的值修改为 10。因为 arguments对象中的值会自动反映到对应的命名参数，所以修改 arguments[1]，也就修改了 num2，结果它们的值都会变成 10。不过，这并不是说读取这两个值会访问相同的内存空间；它们的内存空间是独立的，但它们的值会同步。另外还要记住，如果只传入了一个参数，那么为 arguments[1]设置的值不会反应到命名参数中。这是因为 arguments 对象的长度是由传入的参数个数决定的，不是由定义函数时的命名参数的个数决定的。
        p.paragraph 关于参数还要记住最后一点：没有传递值的命名参数将自动被赋予 undefined 值。这就跟定义了变量但又没有初始化一样。例如，如果只给 doAdd()函数传递了一个参数，则 num2 中就会保存undefined 值。
        p.paragraph 严格模式对如何使用 arguments 对象做出了一些限制。首先，像前面例子中那样的赋值会变得无效。也就是说，即使把 arguments[1]设置为 10，num2 的值仍然还是 undefined。其次，重写arguments 的值会导致语法错误（代码将不会执行）。
        p.paragraph.tips ECMAScript 中的所有参数传递的都是值，不可能通过引用传递参数。

