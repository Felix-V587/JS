include ../../source/_path
- var ch_num="ch6-1-1/"
//- 章节
#ch6-1-1
    //-文段
    section
        p.h3 6.1.1 属性类型
        p.paragraph ECMA-262第5版在定义只有内部才用的特性（attribute）时，描述了属性（property）的各种特征。    ECMA-262定义这些特性是为了实现JavaScript引擎用的，因此在JavaScript中不能直接访问它们。为了表示特性是内部值，该规范把它们放在了两对儿方括号中，例如[[Enumerable]]。尽管ECMA-262第3版的定义有些不同，但本书只参考第5版的描述。
        p.paragraph ECMAScript中有两种属性：数据属性和访问器属性。
        p.paragraph.strong 1. 数据属性
        p.paragraph 数据属性包含一个数据值的位置。在这个位置可以读取和写入值。数据属性有4个描述其行为的特性。
        ul
            li [[Configurable]]：表示能否通过delete删除属性从而重新定义属性，能否修改属性的特性，或者能否把属性修改为访问器属性。像前面例子中那样直接在对象上定义的属性，它们的这个特性默认值为true。
            li [[Enumerable]]：表示能否通过for-in循环返回属性。像前面例子中那样直接在对象上定义的属性，它们的这个特性默认值为true。
            li [[Writable]]：表示能否修改属性的值。像前面例子中那样直接在对象上定义的属性，它们的这个特性默认值为true。
            li [[Value]]：包含这个属性的数据值。读取属性值的时候，从这个位置读；写入属性值的时候，把新值保存在这个位置。这个特性的默认值为undefined。
        p.paragraph 对于像前面例子中那样直接在对象上定义的属性，它们的[[Configurable]]、[[Enumerable]]和[[Writable]]特性都被设置为true，而[[Value]]特性被设置为指定的值。例如：
        pre
            code.
                var person = {
                    name: "Nicholas"
                };
        p.paragraph 这里创建了一个名为name的属性，为它指定的值是"Nicholas"。也就是说，[[Value]]特性将被设置为"Nicholas"，而对这个值的任何修改都将反映在这个位置。
        p.paragraph 要修改属性默认的特性，必须使用ECMAScript5的Object.defineProperty()方法。这个方法接收三个参数：属性所在的对象、属性的名字和一个描述符对象。其中，描述符（descriptor）对象的属性必须是：configurable、enumerable、writable和value。设置其中的一或多个值，可以修改对应的特性值。例如：
        pre
            code.
                var person = {};
                Object.defineProperty(person, "name", {
                    writable: false,
                    value: "Nicholas"
                });
                alert(person.name); //"Nicholas"
                person.name = "Greg";
                alert(person.name); //"Nicholas"
        p.paragraph.source-file DataPropertiesExample01.htm
        p.paragraph 这个例子创建了一个名为name的属性，它的值"Nicholas"是只读的。这个属性的值是不可修改的，如果尝试为它指定新值，则在非严格模式下，赋值操作将被忽略；在严格模式下，赋值操作将会导致抛出错误。
        p.paragraph 类似的规则也适用于不可配置的属性。例如：
        pre
            code.
                var person = {};
                Object.defineProperty(person, "name", {
                    configurable: false,
                    value: "Nicholas"
                });
                alert(person.name); //"Nicholas"
                delete person.name;
                alert(person.name); //"Nicholas"
        p.paragraph.source-file DataPropertiesExample02.htm
        p.paragraph 把configurable设置为false，表示不能从对象中删除属性。如果对这个属性调用delete，则在非严格模式下什么也不会发生，而在严格模式下会导致错误。而且，一旦把属性定义为不可配置的，就不能再把它变回可配置了。此时，再调用Object.defineProperty()方法修改除writable之外的特性，都会导致错误：
        pre
            code.
                var person = {};
                Object.defineProperty(person, "name", {
                    configurable: false,
                    value: "Nicholas"
                });
                //抛出错误
                Object.defineProperty(person, "name", {
                    configurable: true,
                    value: "Nicholas"
                });
        p.paragraph.source-file DataPropertiesExample03.htm
        p.paragraph 也就是说，可以多次调用Object.defineProperty()方法修改同一个属性，但在把configurable特性设置为false之后就会有限制了。
        p.paragraph 在调用Object.defineProperty()方法时，如果不指定，configurable、enumerable和writable特性的默认值都是false。多数情况下，可能都没有必要利用Object.defineProperty()方法提供的这些高级功能。不过，理解这些概念对理解JavaScript对象却非常有用。
        p.paragraph.tips    IE8是第一个实现Object.defineProperty()方法的浏览器版本。然而，这个版本的实现存在诸多限制：只能在DOM对象上使用这个方法，而且只能创建访问器属性。由于实现不彻底，建议读者不要在IE8中使用Object.defineProperty()方法。
        p.paragraph.strong 2. 访问器属性
        p.paragraph 访问器属性不包含数据值；它们包含一对儿getter和setter函数（不过，这两个函数都不是必需的）。在读取访问器属性时，会调用getter函数，这个函数负责返回有效的值；在写入访问器属性时，会调用setter函数并传入新值，这个函数负责决定如何处理数据。访问器属性有如下4个特性。
        ul
            li [[Configurable]]：表示能否通过delete删除属性从而重新定义属性，能否修改属性的特性，或者能否把属性修改为数据属性。对于直接在对象上定义的属性，这个特性的默认值为true。
            li [[Enumerable]]：表示能否通过for-in循环返回属性。对于直接在对象上定义的属性，这个特性的默认值为true。
            li [[Get]]：在读取属性时调用的函数。默认值为undefined。
            li [[Set]]：在写入属性时调用的函数。默认值为undefined。
        p.paragraph 访问器属性不能直接定义，必须使用Object.defineProperty()来定义。请看下面的例子。
        pre
            code.
                var book = {
                    _year: 2004,
                    edition: 1
                };
                Object.defineProperty(book, "year", {
                    get: function(){
                        return this._year;
                    },
                    set: function(newValue){
                        if (newValue &gt; 2004) {
                            this._year = newValue;
                            this.edition += newValue - 2004;
                        }
                    }
                });
                book.year = 2005;
                alert(book.edition); //2
        p.paragraph.source-file AccessorPropertiesExample01.htm
        p.paragraph 以上代码创建了一个book对象，并给它定义两个默认的属性：_year和edition。_year 前面的下划线是一种常用的记号，用于表示只能通过对象方法访问的属性。而访问器属性year则包含一个    getter函数和一个setter函数。getter函数返回_year的值，setter函数通过计算来确定正确的版本。因此，把year属性修改为2005会导致_year变成 2005，而edition变为2。这是使用访问器属性的常见方式，即设置一个属性的值会导致其他属性发生变化。
        p.paragraph 不一定非要同时指定getter和setter。只指定getter意味着属性是不能写，尝试写入属性会被忽略。在严格模式下，尝试写入只指定了getter函数的属性会抛出错误。类似地，只指定setter 函数的属性也不能读，否则在非严格模式下会返回undefined，而在严格模式下会抛出错误。
        p.paragraph 支持ECMAScript 5的这个方法的浏览器有IE9+（IE8只是部分实现）、Firefox4+、Safari 5+、Opera12+和Chrome。在这个方法之前，要创建访问器属性，一般都使用两个非标准的方法：    __defineGetter__()和__defineSetter__()。这两个方法最初是由Firefox引入的，后来Safari 3、Chrome 1和Opera9.5也给出了相同的实现。使用这两个遗留的方法，可以像下面这样重写前面的例子。
        pre
            code.
                var book = {
                    _year: 2004,
                    edition: 1
                };
                //定义访问器的旧有方法
                book.__defineGetter__("year",function(){
                    return this._year;
                });
                book.__defineSetter__("year",function(newValue){
                    if (newValue &gt; 2004) {
                        this._year = newValue;
                        this.edition += newValue - 2004;
                    }
                });
                book.year = 2005;
                alert(book.edition); //2
        p.paragraph.source-file AccessorPropertiesExample02.htm
        p.paragraph 在不支持Object.defineProperty()方法的浏览器中不能修改[[Configurable]]和[[Enumerable]]。
