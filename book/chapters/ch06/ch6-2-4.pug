include ../../source/_path
- var ch_num="ch6-2-4/"
//- 章节
#ch6-2-4
    //-文段
    section
        p.h3 6.2.4 组合使用构造函数模式和原型模式
        p.paragraph 创建自定义类型的最常见方式，就是组合使用构造函数模式与原型模式。构造函数模式用于定义实例属性，而原型模式用于定义方法和共享的属性。结果，每个实例都会有自己的一份实例属性的副本，但同时又共享着对方法的引用，最大限度地节省了内存。另外，这种混成模式还支持向构造函数传递参数；可谓是集两种模式之长。下面的代码重写了前面的例子。
        pre
            code.
                function Person(name, age, job){
                    this.name = name;
                    this.age = age;
                    this.job = job;
                    this.friends = ["Shelby", "Court"];
                }
                Person.prototype = {
                    constructor : Person,
                    sayName : function(){
                        alert(this.name);
                    }
                }
                var person1 = new Person("Nicholas", 29,"Software Engineer");
                var person2 = new Person("Greg", 27, "Doctor");
                person1.friends.push("Van");
                alert(person1.friends); //"Shelby,Count,Van"
                alert(person2.friends); //"Shelby,Count"
                alert(person1.friends === person2.friends); //false
                alert(person1.sayName === person2.sayName); //true
        p.paragraph.source-file HybridPatternExample01.htm
        p.paragraph 在这个例子中，实例属性都是在构造函数中定义的，而由所有实例共享的属性constructor和方法sayName()则是在原型中定义的。而修改了person1.friends（向其中添加一个新字符串），并不会影响到person2.friends，因为它们分别引用了不同的数组。
        p.paragraph 这种构造函数与原型混成的模式，是目前在ECMAScript中使用最广泛、认同度最高的一种创建自定义类型的方法。可以说，这是用来定义引用类型的一种默认模式。
