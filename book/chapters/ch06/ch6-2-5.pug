include ../../source/_path
- var ch_num="ch6-2-5/"
//- 章节
#ch6-2-5
    //-文段
    section
        p.h3 6.2.5 动态原型模式
        p.paragraph 有其他OO语言经验的开发人员在看到独立的构造函数和原型时，很可能会感到非常困惑。动态原型模式正是致力于解决这个问题的一个方案，它把所有信息都封装在了构造函数中，而通过在构造函数中初始化原型（仅在必要的情况下），又保持了同时使用构造函数和原型的优点。换句话说，可以通过检查某个应该存在的方法是否有效，来决定是否需要初始化原型。来看一个例子。
        pre
            code.
                function Person(name, age, job){
                    //属性
                    this.name = name;
                    this.age = age;
                    this.job = job;
                    //方法
                     if (typeof this.sayName != "function"){
                        Person.prototype.sayName = function(){
                            alert(this.name);
                        };
                    }
                }
                var friend = new Person("Nicholas", 29,"Software Engineer");
                friend.sayName();
        p.paragraph.source-file DynamicPrototypeExample01.htm
        p.paragraph 注意构造函数代码中加粗的部分。这里只在sayName()方法不存在的情况下，才会将它添加到原型中。这段代码只会在初次调用构造函数时才会执行。此后，原型已经完成初始化，不需要再做什么修改了。不过要记住，这里对原型所做的修改，能够立即在所有实例中得到反映。因此，这种方法确实可以说非常完美。其中，if语句检查的可以是初始化之后应该存在的任何属性或方法——不必用一大堆if语句检查每个属性和每个方法；只要检查其中一个即可。对于采用这种模式创建的对象，还可以使用instanceof操作符确定它的类型。
        p.paragraph.tips 使用动态原型模式时，不能使用对象字面量重写原型。前面已经解释过了，如果在已经创建了实例的情况下重写原型，那么就会切断现有实例与新原型之间的联系。
