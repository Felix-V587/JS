include ../../source/_path
- var ch_num="ch6-3-2/"
//- 章节
#ch6-3-2
    //-文段
    section
        p.h3 6.3.2 借用构造函数
        p.paragraph 在解决原型中包含引用类型值所带来问题的过程中，开发人员开始使用一种叫做借用构造函数（constructorstealing）的技术（有时候也叫做伪造对象或经典继承）。这种技术的基本思想相当简单，即在子类型构造函数的内部调用超类型构造函数。别忘了，函数只不过是在特定环境中执行代码的对象，因此通过使用apply()和call()方法也可以在（将来）新创建的对象上执行构造函数，如下所示：
        pre
            code.
                function SuperType(){
                    this.colors = ["red", "blue","green"];
                }
                function SubType(){
                    //继承了SuperType
                    SuperType.call(this);
                }
                var instance1 = new SubType();
                instance1.colors.push("black");
                alert(instance1.colors); //"red,blue,green,black"
                var instance2 = new SubType();
                alert(instance2.colors);//"red,blue,green"
        p.paragraph.source-file ConstructorStealingExample01.htm
        p.paragraph 代码中加粗的那一行代码“借调”了超类型的构造函数。通过使用call()方法（或apply()方法也可以），我们实际上是在（未来将要）新创建的SubType实例的环境下调用了SuperType构造函数。这样一来，就会在新SubType对象上执行 SuperType()函数中定义的所有对象初始化代码。结果，SubType的每个实例就都会具有自己的colors属性的副本了。
        p.paragraph.strong 1. 传递参数
        p.paragraph 相对于原型链而言，借用构造函数有一个很大的优势，即可以在子类型构造函数中向超类型构造函数传递参数。看下面这个例子。
        pre
            code.
                function SuperType(name){
                    this.name = name;
                }
                function SubType(){
                    //继承了SuperType，同时还传递了参数
                    SuperType.call(this, "Nicholas");
                    //实例属性
                    this.age = 29;
                }
                var instance = new SubType();
                alert(instance.name); //"Nicholas";
                alert(instance.age); //29
        p.paragraph.source-file ConstructorStealingExample02.htm
        p.paragraph 以上代码中的SuperType只接受一个参数name，该参数会直接赋给一个属性。在SubType 构造函数内部调用SuperType构造函数时，实际上是为 SubType的实例设置了name属性。为了确保SuperType构造函数不会重写子类型的属性，可以在调用超类型构造函数后，再添加应该在子类型中定义的属性。
        p.paragraph.strong 2. 借用构造函数的问题
        p.paragraph 如果仅仅是借用构造函数，那么也将无法避免构造函数模式存在的问题——方法都在构造函数中定义，因此函数复用就无从谈起了。而且，在超类型的原型中定义的方法，对子类型而言也是不可见的，结果所有类型都只能使用构造函数模式。考虑到这些问题，借用构造函数的技术也是很少单独使用的。
