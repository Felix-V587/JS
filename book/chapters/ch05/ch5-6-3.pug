include ../../source/_path
- var ch_num="ch5-6-3/"
//- 章节
#ch5-6-3
    //-文段
    section
        p.h3 5.6.3 String类型
        p.paragraph String类型是字符串的对象包装类型，可以像下面这样使用String构造函数来创建。
        pre
            code var stringObject = new String("hello world");
        p.paragraph.source-file StringTypeExample01.htmString
        p.paragraph 对象的方法也可以在所有基本的字符串值中访问到。其中，继承的valueOf()、toLocale-String()和toString()方法，都返回对象所表示的基本字符串值。
        p.paragraph String类型的每个实例都有一个length属性，表示字符串中包含多个字符。来看下面的例子。
        pre
            code.
                var stringValue = "hello world";
                alert(stringValue.length); //"11"
        p.paragraph 这个例子输出了字符串"hello world"中的字符数量，即"11"。应该注意的是，即使字符串中包含双字节字符（不是占一个字节的ASCII字符），每个字符也仍然算一个字符。
        p.paragraph String类型提供了很多方法，用于辅助完成对ECMAScript中字符串的解析和操作。
        p.paragraph.strong 1. 字符方法
        p.paragraph 两个用于访问字符串中特定字符的方法是：charAt()和charCodeAt()。这两个方法都接收一个参数，即基于0的字符位置。其中，charAt()方法以单字符字符串的形式返回给定位置的那个字符（ECMAScript中没有字符类型）。例如：
        pre
            code.
                var stringValue = "hello world";
                alert(stringValue.charAt(1)); //"e"
        p.paragraph 字符串"hello world"位置1处的字符是"e"，因此调用charAt(1)就返回了"e"。如果你想得到的不是字符而是字符编码，那么就要像下面这样使用charCodeAt()了。
        pre
            code.
                var stringValue = "hello world";
                alert(stringValue.charCodeAt(1)); //输出"101"
        p.paragraph 这个例子输出的是"101"，也就是小写字母"e"的字符编码。
        p.paragraph ECMAScript 5还定义了另一个访问个别字符的方法。在支持此方法的浏览器中，可以使用方括号加数字索引来访问字符串中的特定字符，如下面的例子所示。
        pre
            code.
                var stringValue = "hello world";
                alert(stringValue[1]); //"e"
        p.paragraph 使用方括号表示法访问个别字符的语法得到了IE8及Firefox、Safari、Chrome和Opera所有版本的支持。如果是在IE7及更早版本中使用这种语法，会返回 undefined值（尽管根本不是特殊的undefined值）。
        p.paragraph.strong 2. 字符串操作方法
        p.paragraph 下面介绍与操作字符串有关的几个方法。第一个就是concat()，用于将一或多个字符串拼接起来，返回拼接得到的新字符串。先来看一个例子。
        pre
            code.
                var stringValue = "hello ";
                var result = stringValue.concat("world");
                alert(result); //"hello world"
                alert(stringValue); //"hello"
        p.paragraph 在这个例子中，通过stringValue调用 concat()方法返回的结果是"helloworld"——但stringValue的值则保持不变。实际上，concat()方法可以接受任意多个参数，也就是说可以通过它拼接任意多个字符串。再看一个例子：
        pre
            code.
                var stringValue = "hello ";
                var result = stringValue.concat("world","!");
                alert(result); //"hello world!"
                alert(stringValue); //"hello"
        p.paragraph 这个例子将"world"和"!"拼接到了"hello"的末尾。虽然concat()是专门用来拼接字符串的方法，但实践中使用更多的还是加号操作符（+）。而且，使用加号操作符在大多数情况下都比使用concat()方法要简便易行（特别是在拼接多个字符串的情况下）。
        p.paragraph ECMAScript还提供了三个基于子字符串创建新字符串的方法：slice()、substr()和substring()。这三个方法都会返回被操作字符串的一个子字符串，而且也都接受一或两个参数。第一个参数指定子字符串的开始位置，第二个参数（在指定的情况下）表示子字符串到哪里结束。具体来说，slice()和substring()的第二个参数指定的是子字符串最后一个字符后面的位置。而substr()的第二个参数指定的则是返回的字符个数。如果没有给这些方法传递第二个参数，则将字符串的长度作为结束位置。与concat()方法一样，slice()、substr()和substring()也不会修改字符串本身的值——它们只是返回一个基本类型的字符串值，对原始字符串没有任何影响。请看下面的例子。
        pre
            code.
                var stringValue = "hello world";
                alert(stringValue.slice(3)); //"lo world"
                alert(stringValue.substring(3)); //"lo world"
                alert(stringValue.substr(3)); //"lo world"
                alert(stringValue.slice(3, 7)); //"lo w"
                alert(stringValue.substring(3,7)); //"lo w"
                alert(stringValue.substr(3, 7)); //"lo worl"
        p.paragraph.source-file StringTypeManipulationMethodsExample01.htm
        p.paragraph 这个例子比较了以相同方式调用slice()、substr()和substring()得到的结果，而且多数情况下的结果是相同的。在只指定一个参数3的情况下，这三个方法都返回"lo world"，因为"hello"中的第二个"l"处于位置3。而在指定两个参数3和7的情况下，slice()和substring()返回"low"（"world"中的"o"处于位置7，因此结果中不包含"o"），但substr()返回"loworl"，因为它的第二个参数指定的是要返回的字符个数。
        p.paragraph 在传递给这些方法的参数是负值的情况下，它们的行为就不尽相同了。其中，slice()方法会将传入的负值与字符串的长度相加，substr()方法将负的第一个参数加上字符串的长度，而将负的第二个参数转换为0。最后，substring()方法会把所有负值参数都转换为0。下面来看例子。
        pre
            code.
                var stringValue = "hello world";
                alert(stringValue.slice(-3)); //"rld"
                alert(stringValue.substring(-3)); //"hello world"
                alert(stringValue.substr(-3)); //"rld"
                alert(stringValue.slice(3, -4)); //"lo w"
                alert(stringValue.substring(3, -4)); //"hel"
                alert(stringValue.substr(3, -4)); //""（空字符串）
        p.paragraph.source-file StringTypeManipulationMethodsExample01.htm这个例子清晰地展示了上述三个方法之间的不同行为。在给slice()和substr()传递一个负值参数时，它们的行为相同。这是因为-3会被转换为8（字符串长度加参数11+(-3)=8），实际上相当于调用了slice(8)和substr(8)。但substring()方法则返回了全部字符串，因为它将-3转换成了0。
        p.paragraph.tips IE的JavaScript实现在处理向substr()方法传递负值的情况时存在问题，它会返回原始的字符串。IE9修复了这个问题。
        p.paragraph 当第二个参数是负值时，这三个方法的行为各不相同。slice()方法会把第二个参数转换为7，这就相当于调用了slice(3,7)，因此返回"lo w"。substring()方法会把第二个参数转换为0，使调用变成了substring(3,0)，而由于这个方法会将较小的数作为开始位置，将较大的数作为结束位置，因此最终相当于调用了substring(0,3)。substr()也会将第二个参数转换为0，这也就意味着返回包含零个字符的字符串，也就是一个空字符串。
        p.paragraph.strong 3. 字符串位置方法
        p.paragraph 有两个可以从字符串中查找子字符串的方法：indexOf()和lastIndexOf()。这两个方法都是从一个字符串中搜索给定的子字符串，然后返子字符串的位置（如果没有找到该子字符串，则返回-1）。这两个方法的区别在于：indexOf()方法从字符串的开头向后搜索子字符串，而lastIndexOf()方法是从字符串的末尾向前搜索子字符串。还是来看一个例子吧。
        pre
            code.
                var stringValue = "hello world";
                alert(stringValue.indexOf("o")); //4
                alert(stringValue.lastIndexOf("o")); //7
        p.paragraph.source-file StringTypeLocationMethodsExample01.htm
        p.paragraph 子字符串"o"第一次出现的位置是4，即"hello"中的"o"；最后一次出现的位置是7，即"world"中的"o"。如果"o"在这个字符串中仅出现了一次，那么indexOf()和lastIndexOf()会返回相同的位置值。
        p.paragraph 这两个方法都可以接收可选的第二个参数，表示从字符串中的哪个位置开始搜索。换句话说，indexOf()会从该参数指定的位置向后搜索，忽略该位置之前的所有字符；而lastIndexOf()则会从指定的位置向前搜索，忽略该位置之后的所有字符。看下面的例子。
        pre
            code.
                var stringValue = "hello world";
                alert(stringValue.indexOf("o", 6)); //7
                alert(stringValue.lastIndexOf("o", 6));//4
        p.paragraph 在将第二个参数6传递给这两个方法之后，得到了与前面例子相反的结果。这一次，由于indexOf()从位置6（字母"w"）开始向后搜索，结果在位置7找到了"o"，因此它返回7。而last-IndexOf()是从位置6开始向前搜索。结果找到了"hello"中的"o"，因此它返回4。在使用第二个参数的情况下，可以通过循环调用indexOf()或lastIndexOf()来找到所有匹配的子字符串，如下面的例子所示：
        pre
            code.
                var stringValue = "Lorem ipsum dolor sit amet,consectetur adipisicing elit";
                var positions = new Array();
                var pos = stringValue.indexOf("e");

                while(pos &gt; -1){
                    positions.push(pos);
                    pos = stringValue.indexOf("e", pos + 1);
                }

                alert(positions); //"3,24,32,35,52"
        p.paragraph.source-file StringTypeLocationMethodsExample02.htm
        p.paragraph 这个例子通过不断增加indexOf()方法开始查找的位置，遍历了一个长字符串。在循环之外，首先找到了"e"在字符串中的初始位置；而进入循环后，则每次都给indexOf()传递上一次的位置加1。这样，就确保了每次新搜索都从上一次找到的子字符串的后面开始。每次搜索返回的位置依次被保存在数组positions中，以便将来使用。
        p.paragraph.strong 4. trim()方法
        p.paragraph ECMAScript 5为所有字符串定义了trim()方法。这个方法会创建一个字符串的副本，删除前置及后缀的所有空格，然后返回结果。例如：
        pre
            code.
                var stringValue = " hello world ";
                var trimmedStringValue = stringValue.trim();
                alert(stringValue); //" hello world "
                alert(trimmedStringValue); //"hello world"
        p.paragraph 由于trim()返回的是字符串的副本，所以原始字符串中的前置及后缀空格会保持不变。支持这个方法的浏览器有IE9+、Firefox 3.5+、Safari 5+、Opera10.5+和Chrome。此外，Firefox 3.5+、Safari 5+和Chrome8+还支持非标准的trimLeft()和trimRight()方法，分别用于删除字符串开头和末尾的空格。
        p.paragraph.strong 5. 字符串大小写转换方法\
        p.paragraph 接下来我们要介绍的是一组与大小写转换有关的方法。ECMAScript中涉及字符串大小写转换的方法有4个：toLowerCase()、toLocaleLowerCase()、toUpperCase()和toLocaleUpperCase()。其中，toLowerCase()和toUpperCase()是两个经典的方法，借鉴自java.lang.String中的同名方法。而toLocaleLowerCase()和toLocaleUpperCase()方法则是针对特定地区的实现。对有些地区来说，针对地区的方法与其通用方法得到的结果相同，但少数语言（如土耳其语）会为Unicode大小写转换应用特殊的规则，这时候就必须使用针对地区的方法来保证实现正确的转换。以下是几个例子。
        pre
            code.
                var stringValue = "hello world";
                alert(stringValue.toLocaleUpperCase()); //"HELLO WORLD"
                alert(stringValue.toUpperCase()); //"HELLO WORLD"
                alert(stringValue.toLocaleLowerCase()); //"hello world"
                alert(stringValue.toLowerCase()); //"hello world"
        p.paragraph.source-file StringTypeCaseMethodExample01.htm
        p.paragraph 以上代码调用的toLocaleUpperCase()和toUpperCase()都返回了"HELLO WORLD"，就像调用toLocaleLowerCase()和toLowerCase()都返回"hello world"一样。一般来说，在不知道自己的代码将在哪种语言环境中运行的情况下，还是使用针对地区的方法更稳妥一些。
        p.paragraph.strong 6. 字符串的模式匹配方法
        p.paragraph String类型定义了几个用于在字符串中匹配模式的方法。第一个方法就是match()，在字符串上调用这个方法，本质上与调用RegExp的exec()方法相同。match()方法只接受一个参数，要么是一个正则表达式，要么是一个RegExp对象。来看下面的例子。
        pre
            code.
                var text = "cat, bat, sat, fat";
                var pattern = /.at/;
                //与pattern.exec(text)相同
                var matches = text.match(pattern);
                alert(matches.index); //0
                alert(matches[0]); //"cat"
                alert(pattern.lastIndex); //0
        p.paragraph.source-file StringTypePatternMatchingExample01.htm
        p.paragraph 本例中的match()方法返回了一个数组；如果是调用RegExp对象的exec()方法并传递本例中的字符串作为参数，那么也会得到与此相同的数组：数组的第一项是与整个模式匹配的字符串，之后的每一项（如果有）保存着与正则表达式中的捕获组匹配的字符串。
        p.paragraph 另一个用于查找模式的方法是search()。这个方法的唯一参数与match()方法的参数相同：由字符串或RegExp对象指定的一个正则表达式。search()方法返回字符串中第一个匹配项的索引；如果没有找到匹配项，则返回-1。而且，search()方法始终是从字符串开头向后查找模式。看下面的例子。
        pre
            code.
                var text = "cat, bat, sat, fat";
                var pos = text.search(/at/);
                alert(pos); //1
        p.paragraph.source-file StringTypePatternMatchingExample01.htm
        p.paragraph 这个例子中的search()方法返回1，即"at"在字符串中第一次出现的位置。
        p.paragraph 为了简化替换子字符串的操作，ECMAScript提供了replace()方法。这个方法接受两个参数：第一个参数可以是一个RegExp对象或者一个字符串（这个字符串不会被转换成正则表达式），第二个参数可以是一个字符串或者一个函数。如果第一个参数是字符串，那么只会替换第一个子字符串。要想替换所有子字符串，唯一的办法就是提供一个正则表达式，而且要指定全局（g）标志，如下所示。
        pre
            code.
                var text = "cat, bat, sat, fat";
                var result = text.replace("at", "ond");
                alert(result); //"cond, bat, sat, fat"

                result = text.replace(/at/g, "ond");
                alert(result); //"cond, bond, sond,fond"
        p.paragraph.source-file StringTypePatternMatchingExample01.htm
        p.paragraph 在这个例子中，首先传入replace()方法的是字符串"at"和替换用的字符串"ond"。替换的结果是把"cat"变成了"cond"，但字符串中的其他字符并没有受到影响。然后，通过将第一个参数修改为带有全局标志的正则表达式，就将全部"at"都替换成了"ond"。
        p.paragraph 如果第二个参数是字符串，那么还可以使用一些特殊的字符序列，将正则表达式操作得到的值插入到结果字符串中。下表列出了ECMAScript提供的这些特殊的字符序列。
        table
            tr
                th 字符序列
                th 替换文本
            tr
                td $$
                td $
            tr
                td $&amp;
                td 匹配整个模式的子字符串。与RegExp.lastMatch的值相同
            tr
                td $&apos;
                td 匹配的子字符串之前的子字符串。与RegExp.leftContext的值相同
            tr
                td $`
                td 匹配的子字符串之后的子字符串。与RegExp.rightContext的值相同
            tr
                td $n
                td 匹配第n个捕获组的子字符串，其中n等于0～9。例如，$1是匹配第一个捕获组的子字符串，$2是匹配第二个捕获组的子字符串，以此类推。如果正则表达式中没有定义捕获组，则使用空字符串
            tr
                td $nn
                td 匹配第nn个捕获组的子字符串，其中nn等于01～99。例如，$01是匹配第一个捕获组的子字符串，$02是匹配第二个捕获组的子字符串，以此类推。如果正则表达式中没有定义捕获组，则使用空字符串
        p.paragraph 通过这些特殊的字符序列，可以使用最近一次匹配结果中的内容，如下面的例子所示。
        pre
            code.
                var text = "cat, bat, sat, fat";
                result = text.replace(/(.at)/g, "word ($1)");
                alert(result); //word (cat), word (bat), word (sat),word(fat)
        p.paragraph.source-file StringTypePatternMatchingExample01.htm
        p.paragraph 在此，每个以"at"结尾的单词都被替换了，替换结果是"word"后跟一对圆括号，而圆括号中是被字符序列$1所替换的单词。
        p.paragraph replace()方法的第二个参数也可以是一个函数。在只有一个匹配项（即与模式匹配的字符串）的情况下，会向这个函数传递3个参数：模式的匹配项、模式匹配项在字符串中的位置和原始字符串。在正则表达式中定义了多个捕获组的情况下，传递给函数的参数依次是模式的匹配项、第一个捕获组的匹配项、第二个捕获组的匹配项……，但最后两个参数仍然分别是模式的匹配项在字符串中的位置和原始字符串。这个函数应该返回一个字符串，表示应该被替换的匹配项使用函数作为replace()方法的第二个参数可以实现更加精细的替换操作，请看下面这个例子。
        pre
            code.
                function htmlEscape(text){
                    return text.replace(/[&lt;&gt;"&amp;]/g,function(match,pos, originalText){
                        switch(match){
                            case "&lt;":
                                return "&amp;lt;";
                            case "&gt;":
                                return "&amp;gt;";
                            case "&amp;":
                                return "&amp;amp;";
                            case "\"":
                                return "&amp;quot;";
                            }
                        }
                    );
                }

                alert(htmlEscape("&lt;p class=\"greeting\"&gt;Hello world!&lt;/p&gt;"));
                //&amp;lt;p class=&amp;quot;greeting&amp;quot;&amp;gt;Hello world!&amp;lt;/p&amp;gt;
        p.paragraph.source-file StringTypePatternMatchingExample01.htm
        p.paragraph 这里，我们为插入HTML代码定义了函数htmlEscape()，这个函数能够转义4个字符：小于号、大于号、和号以及双引号。实现这种转义的最简单方式，就是使用正则表达式查找这几个字符，然后定义一个能够针对每个匹配的字符返回特定HTML实体的函数。
        p.paragraph 最后一个与模式匹配有关的方法是split()，这个方法可以基于指定的分隔符将一个字符串分割成多个子字符串，并将结果放在一个数组中。分隔符可以是字符串，也可以是一个RegExp对象（这个方法不会将字符串看成正则表达式）。split()方法可以接受可选的第二个参数，用于指定数组的大小，以便确保返回的数组不会超过既定大小。请看下面的例子。
        pre
            code.
                var colorText = "red,blue,green,yellow";
                var colors1 = colorText.split(","); //["red","blue","green", "yellow"]
                var colors2 = colorText.split(",", 2); //["red","blue"]
                var colors3 = colorText.split(/[^\,]+/); //["", ",", ",", ",", ""]
        p.paragraph.source-file StringTypePatternMatchingExample01.htm
        p.paragraph 在这个例子中，colorText是逗号分隔的颜色名字符串。基于该字符串调用split(",")会得到一个包含其中颜色名的数组，用于分割字符串的分隔符是逗号。为了将数组截短，让它只包含两项，可以为split()方法传递第二个参数2。最后，通过使用正则表达式，还可以取得包含逗号字符的数组。需要注意的是，在最后一次调用split()返回的数组中，第一项和最后一项是两个空字符串。之所以会这样，是因为通过正则表达式指定的分隔符出现在了字符串的开头（即子字符串"red"）和末尾（即子字符串"yellow"）。
        p.paragraph 对split()中正则表达式的支持因浏览器而异。尽管对于简单的模式没有什么差别，但对于未发现匹配项以及带有捕获组的模式，匹配的行为就不大相同了。以下是几种常见的差别。
        ul
            li IE8及之前版本会忽略捕获组。ECMA-262规定应该把捕获组拼接到结果数组中。IE9能正确地在结果中包含捕获组。
            li Firefox 3.6及之前版本在捕获组未找到匹配项时，会在结果数组中包含空字符串；ECMA-262规定没有匹配项的捕获组在结果数组中应该用undefined表示。
        p.paragraph 在正则表达式中使用捕获组时还有其他微妙的差别。在使用这种正则表达式时，一定要在各种浏览器下多做一些测试。
        p.paragraph.tips 要了解关于split()方法以及捕获组的跨浏览器问题的更多讨论，请参考StevenLevithan的文章“JavaScript splitbugs：Fixed!”（http://blog.stevenlevithan.com/archives/cross-browser-split）。
        p.paragraph.strong 7. localeCompare()方法
        p.paragraph 与操作字符串有关的最后一个方法是localeCompare()，这个方法比较两个字符串，并返回下列值中的一个：
        ul
            li 如果字符串在字母表中应该排在字符串参数之前，则返回一个负数（大多数情况下是-1，具体的值要视实现而定）；
            li 如果字符串等于字符串参数，则返回0；
            li 如果字符串在字母表中应该排在字符串参数之后，则返回一个正数（大多数情况下是1，具体的值同样要视实现而定）。
        p.paragraph 下面是几个例子。
        pre
            code.
                var stringValue = "yellow";
                alert(stringValue.localeCompare("brick"));//1
                alert(stringValue.localeCompare("yellow"));//0
                alert(stringValue.localeCompare("zoo"));//-1
        p.paragraph.source-file StringTypeLocaleCompareExample01.htm
        p.paragraph 这个例子比较了字符串"yellow"和另外几个值："brick"、"yellow"和"zoo"。因为"brick"在字母表中排在"yellow"之前，所以localeCompare()返回了1；而"yellow"等于"yellow"，所以localeCompare()返回了0；最后，"zoo"在字母表中排在"yellow"后面，所以localeCompare()返回了-1。再强调一次，因为localeCompare()返回的数值取决于实现，所以最好是像下面例子所示的这样使用这个方法。
        pre
            code.
                function determineOrder(value) {
                    var result = stringValue.localeCompare(value);
                    if (result &lt; 0){
                        alert("The string &apos;yellow&apos; comes before the string &apos;" + value + "&apos;.");
                    } else if (result &gt; 0) {
                        alert("The string &apos;yellow&apos; comes after the string &apos;" + value + "&apos;.");
                    } else {
                        alert("The string &apos;yellow&apos; is equal to the string &apos;" + value + "&apos;.");
                    }
                }
                determineOrder("brick");
                determineOrder("yellow");
                determineOrder("zoo");
        p.paragraph.source-file StringTypeLocaleCompareExample01.htm
        p.paragraph 使用这种结构，就可以确保自己的代码在任何实现中都可以正确地运行了。
        p.paragraph localeCompare()方法比较与众不同的地方，就是实现所支持的地区（国家和语言）决定了这个方法的行为。比如，美国以英语作为ECMAScript实现的标准语言，因此localeCompare()就是区分大小写的，于是大写字母在字母表中排在小写字母前头就成为了一项决定性的比较规则。不过，在其他地区恐怕就不是这种情况了。
        p.paragraph.strong 8. fromCharCode()方法
        p.paragraph 另外，String构造函数本身还有一个静态方法：fromCharCode()。这个方法的任务是接收一或多个字符编码，然后将它们转换成一个字符串。从本质上来看，这个方法与实例方法charCodeAt()执行的是相反的操作。来看一个例子：
        pre
            code.
                alert(String.fromCharCode(104, 101, 108, 108, 111));//"hello"
        p.paragraph.source-file StringTypeFromCharCodeExample01.htm
        p.paragraph 在这里，我们给fromCharCode()传递的是字符串"hello"中每个字母的字符编码。9. HTML方法早期的Web浏览器提供商觉察到了使用JavaScript动态格式化 HTML的需求。于是，这些提供商就扩展了标准，实现了一些专门用于简化常见HTML格式化任务的方法。下表列出了这些HTML方法。不过，需要请读者注意的是，应该尽量不使用这些方法，因为它们创建的标记通常无法表达语义。
        table.table-left
            tr
                th 方 法
                th 输出结果
            tr
                td anchor(name)
                td &lt;a name= "name"&gt;string&lt;/a&gt;
            tr
                td big()
                td &lt;big&gt;string&lt;/big&gt;
            tr
                td bold()
                td &lt;b&gt;string&lt;/b&gt;
            tr
                td fixed()
                td &lt;tt&gt;string&lt;/tt&gt;
            tr
                td fontcolor(color)
                td &lt;font color="color"&gt;string&lt;/font&gt;
            tr
                td fontsize(size)
                td &lt;font size="size"&gt;string&lt;/font&gt;
            tr
                td italics()
                td &lt;i&gt;string&lt;/i&gt;
            tr
                td link(url)
                td &lt;a href="url"&gt;string&lt;/a&gt;
            tr
                td small()
                td &lt;small&gt;string&lt;/small&gt;
            tr
                td strike()
                td &lt;strike&gt;string&lt;/strike&gt;
            tr
                td sub()
                td &lt;sub&gt;string&lt;/sub&gt;
            tr
                td sup()
                td &lt;sup&gt;string&lt;/sup&gt;

