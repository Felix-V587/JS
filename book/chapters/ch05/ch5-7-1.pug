include ../../source/_path
- var ch_num="ch5-7-1/"
//- 章节
#ch5-7-1
    //-文段
    section
        p.h3 5.7.1 Global对象
        p.paragraph Global（全局）对象可以说是ECMAScript中最特别的一个对象了，因为不管你从什么角度上看，这个对象都是不存在的。ECMAScript中的Global对象在某种意义上是作为一个终极的“兜底儿对象”来定义的。换句话说，不属于任何其他对象的属性和方法，最终都是它的属性和方法。事实上，没有全局变量或全局函数；所有在全局作用域中定义的属性和函数，都是Global对象的属性。本书前面介绍过的那些函数，诸如isNaN()、isFinite()、parseInt()以及parseFloat()，实际上全都是Global对象的方法。除此之外，Global对象还包含其他一些方法。
        p.paragraph.strong 1. URI编码方法
        p.paragraph Global对象的encodeURI()和encodeURIComponent()方法可以对URI（Uniform ResourceIdentifiers，通用资源标识符）进行编码，以便发送给浏览器。有效的URI中不能包含某些字符，例如空格。而这两个URI编码方法就可以对URI进行编码，它们用特殊的UTF-8编码替换所有无效的字符，从而让浏览器能够接受和理解。
        p.paragraph 其中，encodeURI()主要用于整个URI（例如，http://www.wrox.com/illegalvalue.htm），而encode-URIComponent()主要用于对URI中的某一段（例如前面URI中的illegalvalue.htm）进行编码。它们的主要区别在于，encodeURI()不会对本身属于URI的特殊字符进行编码，例如冒号、正斜杠、问号和井字号；而encodeURIComponent()则会对它发现的任何非标准字符进行编码。来看下面的例子。
        pre
            code.
                var uri = "http://www.wrox.com/illegalvalue.htm#start";
                //"http://www.wrox.com/illegal%20value.htm#start"
                alert(encodeURI(uri));
                //"http%3A%2F%2Fwww.wrox.com%2Fillegal%20value.htm%23start"
                alert(encodeURIComponent(uri));
        p.paragraph.source-file GlobalObjectURIEncodingExample01.htm
        p.paragraph 使用encodeURI()编码后的结果是除了空格之外的其他字符都原封不动，只有空格被替换成了%20。而encodeURIComponent()方法则会使用对应的编码替换所有非字母数字字符。这也正是可以对整个URI使用encodeURI()，而只能对附加在现有URI后面的字符串使用encodeURIComponent()的原因所在。
        p.paragraph.tips 一般来说，我们使用encodeURIComponent()方法的时候要比使用encodeURI()更多，因为在实践中更常见的是对查询字符串参数而不是对基础URI进行编码。
        p.paragraph 与encodeURI()和encodeURIComponent()方法对应的两个方法分别是decodeURI()和decodeURIComponent()。其中，decodeURI()只能对使用encodeURI()替换的字符进行解码。例如，它可将%20替换成一个空格，但不会对%23作任何处理，因为%23表示井字号（#），而井字号不是使用encodeURI()替换的。同样地，decodeURIComponent()能够解码使用encodeURIComponent()编码的所有字符，即它可以解码任何特殊字符的编码。来看下面的例子：
        pre
            code.
                var uri = "http%3A%2F%2Fwww.wrox.com%2Fillegal%20value.htm%23start";
                //http%3A%2F%2Fwww.wrox.com%2Fillegalvalue.htm%23start
                alert(decodeURI(uri));
                //http://www.wrox.com/illegal value.htm#start
                alert(decodeURIComponent(uri));
        p.paragraph.source-file GlobalObjectURIDecodingExample01.htm
        p.paragraph 这里，变量uri包含着一个由encodeURIComponent()编码的字符串。在第一次调用decodeURI()输出的结果中，只有%20被替换成了空格。而在第二次调用decodeURIComponent()输出的结果中，所有特殊字符的编码都被替换成了原来的字符，得到了一个未经转义的字符串（但这个字符串并不是一个有效的URI）。
        p.paragraph.tips URI方法encodeURI()、encodeURIComponent()、decodeURI()和decode-URIComponent()用于替代已经被ECMA-262第3版废弃的escape()和unescape()方法。URI方法能够编码所有Unicode字符，而原来的方法只能正确地编码ASCII字符。因此在开发实践中，特别是在产品级的代码中，一定要使用URI方法，不要使用escape()和unescape()方法。
        p.paragraph.strong 2. eval()方法
        p.paragraph 现在，我们介绍最后一个——大概也是整个ECMAScript语言中最强大的一个方法：eval()。eval()    方法就像是一个完整的ECMAScript解析器，它只接受一个参数，即要执行的ECMAScript（或JavaScript）字符串。看下面的例子：
        pre
            code.
                eval("alert(&apos;hi&apos;)");
        p.paragraph 这行代码的作用等价于下面这行代码：
        pre
            code alert("hi");
        p.paragraph 当解析器发现代码中调用eval()方法时，它会将传入的参数当作实际的ECMAScript语句来解析，然后把执行结果插入到原位置。通过eval()执行的代码被认为是包含该次调用的执行环境的一部分，因此被执行的代码具有与该执行环境相同的作用域链。这意味着通过eval()执行的代码可以引用在包含环境中定义的变量，举个例子：
        pre
            code.
                var msg = "hello world";
                eval("alert(msg)"); //"hello world"
        p.paragraph 可见，变量msg是在eval()调用的环境之外定义的，但其中调用的alert()仍然能够显示"hello world"。这是因为上面第二行代码最终被替换成了一行真正的代码。同样地，我们也可以在eval()调用中定义一个函数，然后再在该调用的外部代码中引用这个函数：
        pre
            code.
                eval("function sayHi() { alert(&apos;hi&apos;);}");
                sayHi();
        p.paragraph 显然，函数sayHi()是在eval()内部定义的。但由于对eval()的调用最终会被替换成定义函数的实际代码，因此可以在下一行调用sayHi()。对于变量也一样：
        pre
            code.
                eval("var msg = &apos;hello world&apos;; ");
                alert(msg); //"hello world"
        p.paragraph 在eval()中创建的任何变量或函数都不会被提升，因为在解析代码的时候，它们被包含在一个字符串中；它们只在eval()执行的时候创建。
        p.paragraph 严格模式下，在外部访问不到eval()中创建的任何变量或函数，因此前面两个例子都会导致错误。同样，在严格模式下，为eval赋值也会导致错误：
        pre
            code.
                "use strict";
                eval = "hi"; //causes error
        p.paragraph.tips 能够解释代码字符串的能力非常强大，但也非常危险。因此在使用eval()时必须极为谨慎，特别是在用它执行用户输入数据的情况下。否则，可能会有恶意用户输入威胁你的站点或应用程序安全的代码（即所谓的代码注入）。
        p.paragraph.strong 3. Global对象的属性
        p.paragraph Global对象还包含一些属性，其中一部分属性已经在本书前面介绍过了。例如，特殊的值undefined、NaN以及Infinity都是Global对象的属性。此外，所有原生引用类型的构造函数，像Object和Function，也都是Global对象的属性。下表列出了Global 对象的所有属性。
        table
            tr
                td th 属 性
                td th 说 明
                td th 属 性
                td th 说 明
            tr
                td undefined
                td 特殊值undefined
                td Date
                td 构造函数Date
            tr
                td NaN
                td 特殊值NaN
                td RegExp
                td 构造函数RegExp
            tr
                td Infinity
                td 特殊值Infinity
                td Error
                td 构造函数Error
            tr
                td Object
                td 构造函数Object
                td EvalError
                td 构造函数EvalError
            tr
                td Array
                td 构造函数Array
                td RangeError
                td 构造函数RangeError
            tr
                td Function
                td 构造函数Function
                td ReferenceError
                td 构造函数ReferenceError
            tr
                td Boolean
                td 构造函数Boolean
                td SyntaxError
                td 构造函数SyntaxError
            tr
                td String
                td 构造函数String
                td TypeError
                td 构造函数TypeError
            tr
                td Number
                td 构造函数Number
                td URIError
                td 构造函数URIError


        p.paragraph ECMAScript5明确禁止给undefined、NaN和Infinity赋值，这样做即使在非严格模式下也会导致错误。\
        p.paragraph.strong 4. window对象
        p.paragraph ECMAScript虽然没有指出如何直接访问Global 对象，但Web浏览器都是将这个全局对象作为window对象的一部分加以实现的。因此，在全局作用域中声明的所有变量和函数，就都成为了window对象的属性。来看下面的例子。
        pre
            code.
                var color = "red";
                function sayColor(){
                    alert(window.color);
                }
                window.sayColor(); //"red"
        p.paragraph.source-file GlobalObjectWindowExample01.htm
        p.paragraph 这里定义了一个名为color的全局变量和一个名为sayColor()的全局函数。在sayColor()内部，我们通过window.color来访问color变量，以说明全局变量是window对象的属性。然后，又使用window.sayColor()来直接通过window对象调用这个函数，结果显示在了警告框中。
        p.paragraph.tips JavaScript中的window对象除了扮演ECMAScript规定的Global对象的角色外，还承担了很多别的任务。第8章在讨论浏览器对象模型时将详细介绍window对象。
        p.paragraph 另一种取得Global对象的方法是使用以下代码：
        pre
            code.
                var global = function(){
                    return this;
                }();
        p.paragraph 以上代码创建了一个立即调用的函数表达式，返回this的值。如前所述，在没有给函数明确指定this值的情况下（无论是通过将函数添加为对象的方法，还是通过调用call()或apply()），this值等于Global对象。而像这样通过简单地返回this来取得 Global对象，在任何执行环境下都是可行的。第7章将深入讨论函数表达式。
