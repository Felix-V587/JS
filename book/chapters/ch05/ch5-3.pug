include ../../source/_path
- var ch_num="ch5-3/"
//- 章节
#ch5-3
    //-文段
    section
        p.h2 5.3 Date类型
        p.paragraph ECMAScript中的Date类型是在早期Java中的java.util.Date类基础上构建的。为此，Date类型使用自UTC（Coordinated    UniversalTime，国际协调时间）1970年1月1日午夜（零时）开始经过的毫秒数来保存日期。在使用这种数据存储格式的条件下，Date类型保存的日期能够精确到1970年1月1日之前或之后的285 616年。
        p.paragraph 要创建一个日期对象，使用new操作符和Date构造函数即可，如下所示。
        pre
            code.
                var now = new Date();
        p.paragraph.source-file DateTypeExample01.htm
        p.paragraph 在调用Date构造函数而不传递参数的情况下，新创建的对象自动获得当前日期和时间。如果想根据特定的日期和时间创建日期对象，必须传入表示该日期的毫秒数（即从UTC时间1970年1月1日午夜起至该日期止经过的毫秒数）。为了简化这一计算过程，ECMAScript提供了两个方法：Date.parse()和Date.UTC()。
        p.paragraph 其中，Date.parse()方法接收一个表示日期的字符串参数，然后尝试根据这个字符串返回相应日期的毫秒数。ECMA-262没有定义Date.parse()应该支持哪种日期格式，因此这个方法的行为因实现而异，而且通常是因地区而异。将地区设置为美国的浏览器通常都接受下列日期格式：
        ul
            li “月/日/年”，如6/13/2004；
            li “英文月名 日,年”，如January 12,2004；
            li “英文星期几 英文月名 日 年 时:分:秒 时区”，如Tue May 25 2004 00:00:00GMT-0700。
            li ISO 8601扩展格式YYYY-MM-DDTHH:mm:ss.sssZ（例如2004-05-25T00:00:00）。只有兼容ECMAScript 5的实现支持这种格式。
        p.paragraph 例如，要为2004年5月25日创建一个日期对象，可以使用下面的代码：
        pre
            code.
                var someDate = new Date(Date.parse("May 25, 2004"));
        p.paragraph.source-file DateTypeExample01.htm
        p.paragraph 如果传入Date.parse()方法的字符串不能表示日期，那么它会返回NaN。实际上，如果直接将表示日期的字符串传递给Date构造函数，也会在后台调用Date.parse()。换句话说，下面的代码与前面的例子是等价的：
        pre
            code.
                var someDate = new Date("May 25, 2004");
        p.paragraph 这行代码将会得到与前面相同的日期对象。
        p.paragraph.tips 日期对象及其在不同浏览器中的实现有许多奇怪的行为。其中有一种倾向是将超出范围的值替换成当前的值，以便生成输出。例如，在解析"January 32, 2007"时，有的浏览器会将其解释为"February 1, 2007"。而Opera则倾向于插入当前月份的当前日期，返回"January当前日期，2007"。也就是说，如果在2007年9月21日运行前面的代码，将会得到"January 21, 2007"（都是21日）。
        p.paragraph Date.UTC()方法同样也返回表示日期的毫秒数，但它与Date.parse()在构建值时使用不同的信息。Date.UTC()的参数分别是年份、基于0的月份（一月是0，二月是1，以此类推）、月中的哪一天（1到31）、小时数（0到23）、分钟、秒以及毫秒数。在这些参数中，只有前两个参数（年和月）是必需的。如果没有提供月中的天数，则假设天数为1；如果省略其他参数，则统统假设为0。以下是两个使用Date.UTC()方法的例子：
        pre
            code.
                // GMT时间2000年1月1日午夜零时
                var y2k = new Date(Date.UTC(2000, 0));
                // GMT时间2005年5月5日下午5:55:55
                var allFives = new Date(Date.UTC(2005, 4, 5, 17, 55,55));
        p.paragraph.source-file DateTypeUTCExample01.htm
        p.paragraph 这个例子创建了两个日期对象。第一个对象表示GMT时间2000年1月1日午夜零时，传入的值一个是表示年份的2000，一个是表示月份的0（即一月份）。因为其他参数是自动填充的（即月中的天数为1，其他所有参数均为0），所以结果就是该月第一天的午夜零时。第二个对象表示GMT时间2005年5月5日下午5:55:55，即使日期和时间中只包含5，也需要传入不一样的参数：月份必须是4（因为月份是基于0的）、小时必须设置为17（因为小时以0到23表示），剩下的参数就很直观了。
        p.paragraph 如同模仿Date.parse()一样，Date构造函数也会模仿Date.UTC()，但有一点明显不同：日期和时间都基于本地时区而非GMT来创建。不过，Date构造函数接收的参数仍然与Date.UTC()相同。
        p.paragraph 因此，如果第一个参数是数值，Date构造函数就会假设该值是日期中的年份，而第二个参数是月份，以此类推。据此，可以将前面的例子重写如下。
        pre
            code.
                // 本地时间2000年1月1日午夜零时
                var y2k = new Date(2000, 0);
                // 本地时间2005年5月5日下午5:55:55
                var allFives = new Date(2005, 4, 5, 17, 55, 55);
        p.paragraph.source-file DateTypeConstructorExample01.htm
        p.paragraph 以上代码创建了与前面例子中相同的两个日期对象，只不过这次的日期都是基于系统设置的本地时区创建的。
        p.paragraph ECMAScript5添加了Data.now()方法，返回表示调用这个方法时的日期和时间的毫秒数。这个方法简化了使用Data对象分析代码的工作。例如：
        pre
            code.
                //取得开始时间
                var start = Date.now();
                //调用函数
                doSomething();
                //取得停止时间
                var stop = Date.now(),
                    result = stop – start;
        p.paragraph 支持Data.now()方法的浏览器包括IE9+、Firefox 3+、Safari    3+、Opera10.5和Chrome。在不支持它的浏览器中，使用+操作符把Data对象转换成字符串，也可以达到同样的目的。
        pre
            code.
                //取得开始时间
                var start = +new Date();
                //调用函数
                doSomething();
                //取得停止时间
                var stop = +new Date(),
                    result = stop - start;
