include ../../source/_path
- var ch_num="ch5-4-2/"
//- 章节
#ch5-4-2
    //-文段
    section
        p.h3 5.4.2 RegExp实例方法
        p.paragraph RegExp对象的主要方法是exec()，该方法是专门为捕获组而设计的。exec()接受一个参数，即要应用模式的字符串，然后返回包含第一个匹配项信息的数组；或者在没有匹配项的情况下返回null。返回的数组虽然是Array的实例，但包含两个额外的属性：index和input。其中，index表示匹配项在字符串中的位置，而input表示应用正则表达式的字符串。在数组中，第一项是与整个模式匹配的字符串，其他项是与模式中的捕获组匹配的字符串（如果模式中没有捕获组，则该数组只包含一项）。请看下面的例子。
        pre
            code.
                var text = "mom and dad and baby";
                var pattern = /mom( and dad( and baby)?)?/gi;

                var matches = pattern.exec(text);
                alert(matches.index); // 0
                alert(matches.input); // "mom and dad and baby"
                alert(matches[0]); // "mom and dad and baby"
                alert(matches[1]); // " and dad and baby"
                alert(matches[2]); // " and baby"
        p.paragraph.source-file RegExpExecExample01.htm
        p.paragraph 这个例子中的模式包含两个捕获组。最内部的捕获组匹配"and baby"，而包含它的捕获组匹配"anddad"或者"and dad and baby"。当把字符串传入exec()方法中之后，发现了一个匹配项。因为整个字符串本身与模式匹配，所以返回的数组matchs的index属性值为0。数组中的第一项是匹配的整个字符串，第二项包含与第一个捕获组匹配的内容，第三项包含与第二个捕获组匹配的内容。
        p.paragraph 对于exec()方法而言，即使在模式中设置了全局标志（g），它每次也只会返回一个匹配项。在不设置全局标志的情况下，在同一个字符串上多次调用exec()将始终返回第一个匹配项的信息。而在设置全局标志的情况下，每次调用exec()则都会在字符串中继续查找新匹配项，如下面的例子所示。
        pre
            code.
                var text = "cat, bat, sat, fat";
                var pattern1 = /.at/;

                var matches = pattern1.exec(text);
                alert(matches.index); //0
                alert(matches[0]); //cat
                alert(pattern1.lastIndex); //0

                matches = pattern1.exec(text);
                alert(matches.index); //0
                alert(matches[0]); //cat
                alert(pattern1.lastIndex); //0

                var pattern2 = /.at/g;

                var matches = pattern2.exec(text);
                alert(matches.index); //0
                alert(matches[0]); //cat
                alert(pattern2.lastIndex); //3

                matches = pattern2.exec(text);
                alert(matches.index); //5
                alert(matches[0]); //bat
                alert(pattern2.lastIndex); //8
        p.paragraph.source-file RegExpExecExample02.htm
        p.paragraph 这个例子中的第一个模式pattern1不是全局模式，因此每次调用exec()返回的都是第一个匹配项（"cat"）。而第二个模式pattern2是全局模式，因此每次调用exec()都会返回字符串中的下一个匹配项，直至搜索到字符串末尾为止。此外，还应该注意模式的lastIndex属性的变化情况。在全局匹配模式下，lastIndex的值在每次调用exec()后都会增加，而在非全局模式下则始终保持不变。
        p.paragraph.tips IE的JavaScript实现在 lastIndex属性上存在偏差，即使在非全局模式下，lastIndex属性每次也会变化。
        p.paragraph 正则表达式的第二个方法是test()，它接受一个字符串参数。在模式与该参数匹配的情况下返回true；否则，返回false。在只想知道目标字符串与某个模式是否匹配，但不需要知道其文本内容的情况下，使用这个方法非常方便。因此，test()方法经常被用在if语句中，如下面的例子所示。
        pre
            code.
                var text = "000-00-0000";
                var pattern = /\d{3}-\d{2}-\d{4}/;
                if (pattern.test(text)){
                    alert("The pattern was matched.");
                }
        p.paragraph 在这个例子中，我们使用正则表达式来测试了一个数字序列。如果输入的文本与模式匹配，则显示一条消息。这种用法经常出现在验证用户输入的情况下，因为我们只想知道输入是不是有效，至于它为什么无效就无关紧要了。
        p.paragraph RegExp实例继承的toLocaleString()和toString()方法都会返回正则表达式的字面量，与创建正则表达式的方式无关。例如：
        pre
            code.
                var pattern = new RegExp("\\[bc\\]at","gi");
                alert(pattern.toString()); // /\[bc\]at/gi
                alert(pattern.toLocaleString()); // /\[bc\]at/gi
        p.paragraph.source-file RegExpToStringExample01.htm
        p.paragraph 即使上例中的模式是通过调用RegExp构造函数创建的，但toLocaleString()和toString()方法仍然会像它是以字面量形式创建的一样显示其字符串表示。
        p.paragraph.tips 正则表达式的valueOf()方法返回正则表达式本身。
