include ../../source/_path
- var ch_num="ch5-5-5/"
//- 章节
#ch5-5-5
    //-文段
    section
        p.h3 5.5.5 函数属性和方法
        p.paragraph 前面曾经提到过，ECMAScript中的函数是对象，因此函数也有属性和方法。每个函数都包含两个属性：length和prototype。其中，length属性表示函数希望接收的命名参数的个数，如下面的例子所示。
        pre
            code.
                function sayName(name){
                    alert(name);
                }
                function sum(num1, num2){
                    return num1 + num2;
                }
                function sayHi(){
                    alert("hi");
                }
                alert(sayName.length); //1
                alert(sum.length); //2
                alert(sayHi.length); //0
        p.paragraph.source-file FunctionTypeLengthPropertyExample01.htm
        p.paragraph 以上代码定义了3个函数，但每个函数接收的命名参数个数不同。首先，sayName()函数定义了一个参数，因此其length属性的值为1。类似地，sum()函数定义了两个参数，结果其length 属性中保存的值为2。而sayHi()没有命名参数，所以其length值为0。
        p.paragraph 在ECMAScript核心所定义的全部属性中，最耐人寻味的就要数prototype 属性了。对于ECMAScript中的引用类型而言，prototype是保存它们所有实例方法的真正所在。换句话说，诸如toString()和valueOf()等方法实际上都保存在prototype名下，只不过是通过各自对象的实例访问罢了。在创建自定义引用类型以及实现继承时，prototype属性的作用是极为重要的（第6章将详细介绍）。在ECMAScript 5中，prototype属性是不可枚举的，因此使用for-in无法发现。
        p.paragraph 每个函数都包含两个非继承而来的方法：apply()和call()。这两个方法的用途都是在特定的作用域中调用函数，实际上等于设置函数体内this对象的值。首先，apply()方法接收两个参数：一个是在其中运行函数的作用域，另一个是参数数组。其中，第二个参数可以是Array的实例，也可以是arguments对象。例如：
        pre
            code.
                function sum(num1, num2){
                    return num1 + num2;
                }
                function callSum1(num1, num2){
                    return sum.apply(this, arguments); //传入arguments对象
                }
                function callSum2(num1, num2){
                    return sum.apply(this, [num1, num2]); // 传入数组
                }
                alert(callSum1(10,10)); //20
                alert(callSum2(10,10)); //20
        p.paragraph.source-file FunctionTypeApplyMethodExample01.htm
        p.paragraph 在上面这个例子中，callSum1()在执行sum()函数时传入了this作为this值（因为是在全局作用域中调用的，所以传入的就是window对象）和arguments 对象。而callSum2同样也调用了sum()函数，但它传入的则是this和一个参数数组。这两个函数都会正常执行并返回正确的结果。
        p.paragraph.tips 在严格模式下，未指定环境对象而调用函数，则this值不会转型为window。除非明确把函数添加到某个对象或者调用apply()或call()，否则this 值将是undefined。
        p.paragraph call()方法与apply()方法的作用相同，它们的区别仅在于接收参数的方式不同。对于call()方法而言，第一个参数是this值没有变化，变化的是其余参数都直接传递给函数。换句话说，在使用call()方法时，传递给函数的参数必须逐个列举出来，如下面的例子所示。
        pre
            code.
                function sum(num1, num2){
                    return num1 + num2;
                }
                function callSum(num1, num2){
                    return sum.call(this, num1, num2);
                }
                alert(callSum(10,10)); //20
        p.paragraph.source-file FunctionTypeCallMethodExample01.htm
        p.paragraph 在使用call()方法的情况下，callSum()必须明确地传入每一个参数。结果与使用apply()没有什么不同。至于是使用apply()还是call()，完全取决于你采取哪种给函数传递参数的方式最方便。如果你打算直接传入arguments对象，或者包含函数中先接收到的也是一个数组，那么使用apply()肯定更方便；否则，选择call()可能更合适。（在不给函数传递参数的情况下，使用哪个方法都无所谓。）
        p.paragraph 事实上，传递参数并非apply()和call()真正的用武之地；它们真正强大的地方是能够扩充函数赖以运行的作用域。下面来看一个例子。
        pre
            code.
                window.color = "red";
                var o = { color: "blue" };
                function sayColor(){
                    alert(this.color);
                }
                sayColor(); //red
                sayColor.call(this); //red
                sayColor.call(window); //red
                sayColor.call(o); //blue
        p.paragraph.source-file FunctionTypeCallExample01.htm
        p.paragraph 这个例子是在前面说明this对象的示例基础上修改而成的。这一次，sayColor()也是作为全局函数定义的，而且当在全局作用域中调用它时，它确实会显示"red"——因为对this.color的求值会    转换成对window.color的求值。而sayColor.call(this)和sayColor.call(window)，则是两种显式地在全局作用域中调用函数的方式，结果当然都会显示"red"。但是，当运行sayColor.call(o)    时，函数的执行环境就不一样了，因为此时函数体内的this对象指向了o，于是结果显示的是"blue"。
        p.paragraph 使用call()（或apply()）来扩充作用域的最大好处，就是对象不需要与方法有任何耦合关系。在前面例子的第一个版本中，我们是先将sayColor()函数放到了对象o中，然后再通过o来调用它的；而在这里重写的例子中，就不需要先前那个多余的步骤了。ECMAScript5还定义了一个方法：bind()。这个方法会创建一个函数的实例，其this值会被绑定到传给bind()函数的值。例如：
        pre
            code.
                window.color = "red";
                var o = { color: "blue" };
                function sayColor(){
                    alert(this.color);
                }
                var objectSayColor = sayColor.bind(o);
                objectSayColor(); //blue
        p.paragraph.source-file FunctionTypeBindMethodExample01.htm
        p.paragraph 在这里，sayColor()调用bind()并传入对象o，创建了objectSayColor()函数。object-SayColor()函数的this值等于o，因此即使是在全局作用域中调用这个函数，也会看到"blue"。这种技巧的优点请参考第22章。
        p.paragraph 支持bind()方法的浏览器有IE9+、Firefox 4+、Safari 5.1+、Opera12+和Chrome。
        p.paragraph 每个函数继承的toLocaleString()和toString()方法始终都返回函数的代码。返回代码的格式则因浏览器而异——有的返回的代码与源代码中的函数代码一样，而有的则返回函数代码的内部表示，即由解析器删除了注释并对某些代码作了改动后的代码。由于存在这些差异，我们无法根据这两个方法返回的结果来实现任何重要功能；不过，这些信息在调试代码时倒是很有用。另外一个继承的valueOf()方法同样也只返回函数代码。
